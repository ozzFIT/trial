@model FIT5032_ozzFIT_V2.Models.Event

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Create</h2>
<section id="Register">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>Event</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.EventName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.EventName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EventName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.EventDescription, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.EventDescription, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EventDescription, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Location, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.StartDateTime, new { @class = "col-md-2 control-label" })
                <div class="col-md-3">

                    <div class="input-group" id="DateOfBirth">
                        @Html.TextBoxFor(m => m.StartDateTime, new { @class = "form-control", placeholder = "mm/dd/yyyy" })

                        <div class="input-group-addon">
                            <span class="glyphicon glyphicon-calendar"></span>
                        </div>
                    </div>

                    @Html.ValidationMessageFor(m => m.StartDateTime, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                @Html.LabelFor(m => m.EndDateTime, new { @class = "col-md-2 control-label" })
                <div class="col-md-3">

                    <div class="input-group" id="EndDate">
                        @Html.TextBoxFor(m => m.EndDateTime, new { @class = "form-control", placeholder = "mm/dd/yyyy" })

                        <div class="input-group-addon">
                            <span class="glyphicon glyphicon-calendar"></span>
                        </div>
                    </div>

                    @Html.ValidationMessageFor(m => m.EndDateTime, "", new { @class = "text-danger" })
                </div>
            </div>

            @*<div class="form-group">
                    @Html.LabelFor(model => model.StartDateTime, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.StartDateTime, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.StartDateTime, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.EndDateTime, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.EndDateTime, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.EndDateTime, "", new { @class = "text-danger" })
                    </div>
                </div>*@

            <div class="form-group">
                @Html.LabelFor(model => model.ContactPerson, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ContactPerson, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ContactPerson, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ContactDetails, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ContactDetails, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ContactDetails, "", new { @class = "text-danger" })
                </div>
            </div>

            @Html.TextBoxFor(model => model.Likes, new { @hidden = "hidden" })
           

            @*<div class="form-group">
                    @Html.LabelFor(model => model.LikeCount, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.LikeCount, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.LikeCount, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.DislikeCount, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.DislikeCount, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.DislikeCount, "", new { @class = "text-danger" })
                    </div>
                </div>*@

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        </div>
    }

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>
</section>

@section Scripts {
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/bootstrap")
    @Scripts.Render("~/Scripts/jquery.validate.unobtrusive.min.js")
    <script type="text/javascript">
            $(function () {
                $("#DateOfBirth").datetimepicker(
                    {
                        format: 'MM/DD/YYYY',
                        widgetPositioning: {
                            horizontal: 'auto',
                            vertical: 'bottom'
                        },
                        minDate: new Date(),
                        maxDate: new Date('12/31/2030')
                    });
                $("#EndDate").datetimepicker(
                    {
                        format: 'MM/DD/YYYY',
                        widgetPositioning: {
                            horizontal: 'auto',
                            vertical: 'bottom'
                        },
                        minDate: new Date(),
                        maxDate: new Date('12/31/2030')
                    });
                $.validator.addMethod('date', function (value, element) {
                    var d = new Date;
                    //return this.optional(element) || !/Invalid|NaN/.test(new Date(d.toLocaleDateString(value)));
                    return d.toLocaleDateString('en-GB');
                });
                //$.validator.addMethod('date', function (value, element) {
                //    if (this, optional(element)) {
                //        return true;
                //    }
                //    var ok = truel
                //    try {
                //        $.datetimepicker.parseDate('dd/MM/yyyy', value);
                //    }
                //    catch (err) {
                //        ok = false;
                //    }
                //    return ok;
                //})
                //$("#DateOfBirth").on("dp.change", function (e) {
                //    $('#DateOfBirth').data("DateTimePicker").maxDate(DateTime.Now);
                //});
            });
    </script>
}